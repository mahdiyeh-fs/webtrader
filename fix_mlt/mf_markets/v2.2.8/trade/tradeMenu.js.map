{"version":3,"sources":["../../../../src/trade/tradeMenu.es6"],"names":["show_error","err","$","growl","error","message","console","trade_messages","no_mf","i18n","get_active_symbol","landing_company","country","is_mf","isMaltaInvest","is_mlt","isMalta","is_uk","is_synthetic","test","symbol","liveapi","cached","send","active_symbols","then","data","filtered_symbols","filter","market","markets","_","groupBy","map","symbols","sym","head","name","display_name","market_display_name","submarkets","submarket","submarket_display_name","instruments","is_disabled","is_trading_suspended","exchange_is_open","pip","every","value","trade","find","menu","refreshMenu","contracts_for","res","require","tradeDialog","init","catch","refresh_active_symbols","local_storage","get","authorize","log","events","on"],"mappings":"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","file":"tradeMenu.js","sourcesContent":["ï»¿import $ from 'jquery';\nimport liveapi from '../websockets/binary_websockets';\nimport menu from '../navigation/menu';\nimport { getSortedMarketSubmarkets } from '../common/marketUtils';\nimport \"jquery-growl\";\n\nconst show_error = (err) => {\n   $.growl.error({ message: err.message });\n   console.error(err);\n};\n\nconst trade_messages = {\n   no_mf : () => \"Binary options trading is not available in your financial account.\".i18n(),\n};\n\nconst get_active_symbol = (landing_company, country) => {\n   const is_mf        = isMaltaInvest();\n   const is_mlt       = landing_company ? isMalta(landing_company) : false;\n   const is_uk        = country ? country === 'gb' : false;\n   const is_synthetic = symbol => /^(synthetic)/i.test(symbol);\n\n   liveapi\n      .cached\n      .send({ active_symbols: 'brief' })\n      .then((data) => {\n         /* clean up the data! */\n         const active_symbols = data.active_symbols;\n         let filtered_symbols;\n\n         if (is_mf) {\n            filtered_symbols = [];  \n         } else if (is_uk || is_mlt) {\n            filtered_symbols = active_symbols.filter(symbol => is_synthetic(symbol.market));\n         } else {\n            filtered_symbols = active_symbols;\n         }\n        \n         let markets = _(filtered_symbols).groupBy('market').map((symbols) => {\n            const filtered_symbols = symbols;\n            const sym = _.head(filtered_symbols);\n            const market = { name: sym.market, display_name: sym.market_display_name };\n            market.submarkets = _(filtered_symbols).groupBy('submarket').map((symbols) => {\n               const sym = _.head(symbols);\n               const submarket = { name: sym.submarket, display_name: sym.submarket_display_name };\n               submarket.instruments = _.map(symbols, (sym) => ({\n                  symbol: sym.symbol,\n                  display_name: sym.display_name,\n                  is_disabled: sym.is_trading_suspended || !sym.exchange_is_open,\n                  pip: sym.pip\n               })\n               );\n               submarket.is_disabled = _.every(submarket.instruments, 'is_disabled');\n               return submarket;\n            }).value();\n            market.is_disabled = _.every(market.submarkets, 'is_disabled');\n            return market;\n         }).value();\n         markets = getSortedMarketSubmarkets(markets);        \n         const trade = $(\"#nav-menu\").find(\".trade\");\n         menu.refreshMenu(trade, markets, (symbol, display_name, pip) => {\n            liveapi\n               .send({ contracts_for: symbol })\n               .then((res) => {\n                  require(['trade/tradeDialog'],\n                     (tradeDialog) => tradeDialog.init({ symbol, display_name, pip }, res.contracts_for)\n                  );\n               }).catch(show_error);\n         });\n      })\n      .catch(show_error);\n}\n\nconst refresh_active_symbols = () => {\n   if (local_storage.get('oauth')) {\n      liveapi\n         .cached\n         .authorize()\n         .then(() => {\n            const country = local_storage.get('authorize').country;\n            console.log('country' , country)\n            liveapi\n            .cached\n            .send({ landing_company: country })\n            .then((data) => {\n               const landing_company = data.landing_company\n               get_active_symbol(landing_company, country);\n            });\n         })\n   } else{\n      get_active_symbol();\n   }\n}\n\nexport const init = () => {\n   require(['trade/tradeDialog']); // Trigger loading of tradeDialog\n   refresh_active_symbols();\n   require(['websockets/binary_websockets'], (liveapi) => {\n      liveapi.events.on('login', refresh_active_symbols);\n      liveapi.events.on('logout', refresh_active_symbols);\n   });\n}\n\nexport default { init };\n"]}