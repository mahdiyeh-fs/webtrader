{"version":3,"sources":["../../../../src/trade/tradeMenu.es6"],"names":["show_error","err","$","growl","error","message","console","get_active_symbol","landing_company","country","is_mf_account","isFinancialAccout","is_mlt_account","isGamingAccount","is_uk","liveapi","send","active_symbols","then","data","filtered_symbols","filter","isSynthetic","symbol","market","markets","_","groupBy","map","symbols","sym","head","name","display_name","market_display_name","submarkets","submarket","submarket_display_name","instruments","is_disabled","is_trading_suspended","exchange_is_open","pip","every","value","trade","find","menu","refreshMenu","contracts_for","res","require","tradeDialog","init","catch","refresh_active_symbols","local_storage","get","cached","authorize","events","on"],"mappings":"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","file":"tradeMenu.js","sourcesContent":["ï»¿import $ from 'jquery';\nimport liveapi from '../websockets/binary_websockets';\nimport menu from '../navigation/menu';\nimport { getSortedMarketSubmarkets } from '../common/marketUtils';\nimport \"jquery-growl\";\n\nconst show_error = (err) => {\n   $.growl.error({ message: err.message });\n   console.error(err);\n};\n\nconst get_active_symbol = (landing_company, country) => {\n   const is_mf_account  = isFinancialAccout();\n   const is_mlt_account = landing_company ? isGamingAccount(landing_company) : false;\n   const is_uk          = country ? country === 'gb' : false;\n\n   liveapi\n      .send({ active_symbols: 'brief' })\n      .then((data) => {\n         /* clean up the data! */\n         const active_symbols = data.active_symbols;\n         let filtered_symbols;\n         if (is_mf_account) {\n            filtered_symbols = [];  \n         } else if (is_uk || is_mlt_account) {\n            filtered_symbols = active_symbols.filter(symbol => isSynthetic(symbol.market));\n         } else {\n            filtered_symbols = active_symbols;\n         }\n        \n         let markets = _(filtered_symbols).groupBy('market').map((symbols) => {\n            const filtered_symbols = symbols;\n            const sym = _.head(filtered_symbols);\n            const market = { name: sym.market, display_name: sym.market_display_name };\n            market.submarkets = _(filtered_symbols).groupBy('submarket').map((symbols) => {\n               const sym = _.head(symbols);\n               const submarket = { name: sym.submarket, display_name: sym.submarket_display_name };\n               submarket.instruments = _.map(symbols, (sym) => ({\n                  symbol: sym.symbol,\n                  display_name: sym.display_name,\n                  is_disabled: sym.is_trading_suspended || !sym.exchange_is_open,\n                  pip: sym.pip\n               })\n               );\n               submarket.is_disabled = _.every(submarket.instruments, 'is_disabled');\n               return submarket;\n            }).value();\n            market.is_disabled = _.every(market.submarkets, 'is_disabled');\n            return market;\n         }).value();\n         markets = getSortedMarketSubmarkets(markets);        \n         const trade = $(\"#nav-menu\").find(\".trade\");\n         menu.refreshMenu(trade, markets, (symbol, display_name, pip) => {\n            liveapi\n               .send({ contracts_for: symbol })\n               .then((res) => {\n                  require(['trade/tradeDialog'],\n                     (tradeDialog) => tradeDialog.init({ symbol, display_name, pip }, res.contracts_for)\n                  );\n               }).catch(show_error);\n         });\n      })\n      .catch(show_error);\n}\n\nconst refresh_active_symbols = () => {\n   if (local_storage.get('oauth')) {\n      liveapi\n         .cached\n         .authorize()\n         .then(() => {\n            const country = local_storage.get('authorize').country;\n            liveapi\n            .cached\n            .send({ landing_company: country })\n            .then((data) => {\n               const landing_company = data.landing_company\n               get_active_symbol(landing_company, country);\n            });\n         })\n   } else{\n      get_active_symbol();\n   }\n}\n\nexport const init = () => {\n   require(['trade/tradeDialog']); // Trigger loading of tradeDialog\n   refresh_active_symbols();\n   require(['websockets/binary_websockets'], (liveapi) => {\n      liveapi.events.on('login', refresh_active_symbols);\n      liveapi.events.on('logout', refresh_active_symbols);\n   });\n}\n\nexport default { init };\n"]}